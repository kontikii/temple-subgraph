// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OGTempleLocked extends ethereum.Event {
  get params(): OGTempleLocked__Params {
    return new OGTempleLocked__Params(this);
  }
}

export class OGTempleLocked__Params {
  _event: OGTempleLocked;

  constructor(event: OGTempleLocked) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _lockedUntil(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OGTempleWithdraw extends ethereum.Event {
  get params(): OGTempleWithdraw__Params {
    return new OGTempleWithdraw__Params(this);
  }
}

export class OGTempleWithdraw__Params {
  _event: OGTempleWithdraw;

  constructor(event: OGTempleWithdraw) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LockedOGTemple__lockedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LockedOGTemple extends ethereum.SmartContract {
  static bind(address: Address): LockedOGTemple {
    return new LockedOGTemple("LockedOGTemple", address);
  }

  OG_TEMPLE(): Address {
    let result = super.call("OG_TEMPLE", "OG_TEMPLE():(address)", []);

    return result[0].toAddress();
  }

  try_OG_TEMPLE(): ethereum.CallResult<Address> {
    let result = super.tryCall("OG_TEMPLE", "OG_TEMPLE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  locked(param0: Address, param1: BigInt): LockedOGTemple__lockedResult {
    let result = super.call(
      "locked",
      "locked(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new LockedOGTemple__lockedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_locked(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<LockedOGTemple__lockedResult> {
    let result = super.tryCall(
      "locked",
      "locked(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LockedOGTemple__lockedResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  numLocks(_staker: Address): BigInt {
    let result = super.call("numLocks", "numLocks(address):(uint256)", [
      ethereum.Value.fromAddress(_staker)
    ]);

    return result[0].toBigInt();
  }

  try_numLocks(_staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numLocks", "numLocks(address):(uint256)", [
      ethereum.Value.fromAddress(_staker)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _OG_TEMPLE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get _amountOGTemple(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lockedUntilTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class LockForCall extends ethereum.Call {
  get inputs(): LockForCall__Inputs {
    return new LockForCall__Inputs(this);
  }

  get outputs(): LockForCall__Outputs {
    return new LockForCall__Outputs(this);
  }
}

export class LockForCall__Inputs {
  _call: LockForCall;

  constructor(call: LockForCall) {
    this._call = call;
  }

  get _staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountOGTemple(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockedUntilTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LockForCall__Outputs {
  _call: LockForCall;

  constructor(call: LockForCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _idx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawForCall extends ethereum.Call {
  get inputs(): WithdrawForCall__Inputs {
    return new WithdrawForCall__Inputs(this);
  }

  get outputs(): WithdrawForCall__Outputs {
    return new WithdrawForCall__Outputs(this);
  }
}

export class WithdrawForCall__Inputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get _staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _idx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawForCall__Outputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }
}
