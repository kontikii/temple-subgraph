// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccumulationFactorUpdated extends ethereum.Event {
  get params(): AccumulationFactorUpdated__Params {
    return new AccumulationFactorUpdated__Params(this);
  }
}

export class AccumulationFactorUpdated__Params {
  _event: AccumulationFactorUpdated;

  constructor(event: AccumulationFactorUpdated) {
    this._event = event;
  }

  get _epochsProcessed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _currentEpoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _accumulationFactor(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakeCompleted extends ethereum.Event {
  get params(): StakeCompleted__Params {
    return new StakeCompleted__Params(this);
  }
}

export class StakeCompleted__Params {
  _event: StakeCompleted;

  constructor(event: StakeCompleted) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _lockedUntil(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnstakeCompleted extends ethereum.Event {
  get params(): UnstakeCompleted__Params {
    return new UnstakeCompleted__Params(this);
  }
}

export class UnstakeCompleted__Params {
  _event: UnstakeCompleted;

  constructor(event: UnstakeCompleted) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TempleStaking extends ethereum.SmartContract {
  static bind(address: Address): TempleStaking {
    return new TempleStaking("TempleStaking", address);
  }

  EXIT_QUEUE(): Address {
    let result = super.call("EXIT_QUEUE", "EXIT_QUEUE():(address)", []);

    return result[0].toAddress();
  }

  try_EXIT_QUEUE(): ethereum.CallResult<Address> {
    let result = super.tryCall("EXIT_QUEUE", "EXIT_QUEUE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  OG_TEMPLE(): Address {
    let result = super.call("OG_TEMPLE", "OG_TEMPLE():(address)", []);

    return result[0].toAddress();
  }

  try_OG_TEMPLE(): ethereum.CallResult<Address> {
    let result = super.tryCall("OG_TEMPLE", "OG_TEMPLE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TEMPLE(): Address {
    let result = super.call("TEMPLE", "TEMPLE():(address)", []);

    return result[0].toAddress();
  }

  try_TEMPLE(): ethereum.CallResult<Address> {
    let result = super.tryCall("TEMPLE", "TEMPLE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accumulationFactor(): BigInt {
    let result = super.call(
      "accumulationFactor",
      "accumulationFactor():(int128)",
      []
    );

    return result[0].toBigInt();
  }

  try_accumulationFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulationFactor",
      "accumulationFactor():(int128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balance(amountOgTemple: BigInt): BigInt {
    let result = super.call("balance", "balance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountOgTemple)
    ]);

    return result[0].toBigInt();
  }

  try_balance(amountOgTemple: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountOgTemple)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochSizeSeconds(): BigInt {
    let result = super.call(
      "epochSizeSeconds",
      "epochSizeSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_epochSizeSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochSizeSeconds",
      "epochSizeSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epy(): BigInt {
    let result = super.call("epy", "epy():(int128)", []);

    return result[0].toBigInt();
  }

  try_epy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epy", "epy():(int128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccumulationFactor(_scale: BigInt): BigInt {
    let result = super.call(
      "getAccumulationFactor",
      "getAccumulationFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_scale)]
    );

    return result[0].toBigInt();
  }

  try_getAccumulationFactor(_scale: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccumulationFactor",
      "getAccumulationFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_scale)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpy(_scale: BigInt): BigInt {
    let result = super.call("getEpy", "getEpy(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_scale)
    ]);

    return result[0].toBigInt();
  }

  try_getEpy(_scale: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEpy", "getEpy(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_scale)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdatedEpoch(): BigInt {
    let result = super.call(
      "lastUpdatedEpoch",
      "lastUpdatedEpoch():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastUpdatedEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdatedEpoch",
      "lastUpdatedEpoch():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stake(_amountTemple: BigInt): BigInt {
    let result = super.call("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amountTemple)
    ]);

    return result[0].toBigInt();
  }

  try_stake(_amountTemple: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amountTemple)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeFor(_staker: Address, _amountTemple: BigInt): BigInt {
    let result = super.call("stakeFor", "stakeFor(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_staker),
      ethereum.Value.fromUnsignedBigInt(_amountTemple)
    ]);

    return result[0].toBigInt();
  }

  try_stakeFor(
    _staker: Address,
    _amountTemple: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeFor",
      "stakeFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_staker),
        ethereum.Value.fromUnsignedBigInt(_amountTemple)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startTimestamp(): BigInt {
    let result = super.call("startTimestamp", "startTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startTimestamp",
      "startTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _TEMPLE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _EXIT_QUEUE(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _epochSizeSeconds(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetEpyCall extends ethereum.Call {
  get inputs(): SetEpyCall__Inputs {
    return new SetEpyCall__Inputs(this);
  }

  get outputs(): SetEpyCall__Outputs {
    return new SetEpyCall__Outputs(this);
  }
}

export class SetEpyCall__Inputs {
  _call: SetEpyCall;

  constructor(call: SetEpyCall) {
    this._call = call;
  }

  get _numerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _denominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetEpyCall__Outputs {
  _call: SetEpyCall;

  constructor(call: SetEpyCall) {
    this._call = call;
  }
}

export class SetExitQueueCall extends ethereum.Call {
  get inputs(): SetExitQueueCall__Inputs {
    return new SetExitQueueCall__Inputs(this);
  }

  get outputs(): SetExitQueueCall__Outputs {
    return new SetExitQueueCall__Outputs(this);
  }
}

export class SetExitQueueCall__Inputs {
  _call: SetExitQueueCall;

  constructor(call: SetExitQueueCall) {
    this._call = call;
  }

  get _EXIT_QUEUE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExitQueueCall__Outputs {
  _call: SetExitQueueCall;

  constructor(call: SetExitQueueCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amountTemple(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amountOgTemple(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StakeForCall extends ethereum.Call {
  get inputs(): StakeForCall__Inputs {
    return new StakeForCall__Inputs(this);
  }

  get outputs(): StakeForCall__Outputs {
    return new StakeForCall__Outputs(this);
  }
}

export class StakeForCall__Inputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }

  get _staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountTemple(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeForCall__Outputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }

  get amountOgTemple(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _amountOgTemple(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
